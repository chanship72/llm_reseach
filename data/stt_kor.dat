    안녕하십니까 강의 시작하겠습니다

    오늘은  강의의 랑  모듈을 이해를 돕기 위해서

    머신러닝 개념과 데이터 분석 개념에 대해서 강의를 진행하도록 하겠습니다

    지금 화면에 나와있듯이 현재 저희는 차 산업혁명 시대에 살고 있고 그 근간이 되는 빅데이터 그리고 빅데이터를 활용한  기술을

    저희는 사용하고 있는데 흔히 라고 하는 것은 지금 페이지에 나와있듯이 머신러닝 딥러닝

    이렇게 구성되어 있습니다

    머신러닝이라는 것은 우리말로는 기계학습이라고 하는데

    정의하기 힘든 데이터를 활용해서 룰을 정립하는 데 많은 도움을 주었습니다

    과거에는 화면에 나와있듯이 인풋데이터랑 그리고 알고리즘이라고 불리는 프로그램을 통해서

    컴퓨터가 결과를 산출하는 작업을 했다면 현재는 인풋데이터와 그리고 아웃풋데이터를 통해서

    제가 알고리즘을 만드는 역할을 하고 있습니다 이 역할을 하는 중추적인 것이 머신러닝이고

    인풋데이터와 그리고 아웃풋데이터를 통해서 알고리즘 혹은 프로그램을 만든다

    이건 예전에 수학시간을 생각해보면 정말 많이 해봤던 작업인데 이게 인풋과 아웃풋으로 그에 해당하는 함수를 만드는 것이라고 생각하시면 됩니다

    단편적으로 머신러닝 딥러닝 성공기능은 함수를 만드는 작업이라고 생각하시면 됩니다

    인풋과 아웃풋을 넣고 그것을 결정짓는 함수를 만드는 작업이 머신러닝 딥러닝 입니다

    단순하게 지금 그림에 나와있듯이 는 라는 단순한 수식은 데이터 형태가 일정한 경우에는 배 이렇게 찾아낼 수 있는 함수인데

    복잡한 데이터에서 이런 관계식을 설정하기가 굉장히 힘들겠죠 그래서 보통 인간은 여러가지 식을 가정하고 하나하나 인풋데이터와 아웃풋데이터를 넣어가면서

    정답을 찾아가는데 머신러닝은 이런 데이터를 통해서 식을 하나하나 넣어가면서 계속 그 함수를 업데이트 해가는

    것이라고 생각하면 됩니다 여기서 머신러닝 기계학습에서의 러닝은 즉 학습은

    데이터를

    데이터를 통해서 계속 식을 업데이트 해 나가는 것을 학습이라고 생각하시면 되는데 이 학습의 수학적인 개념은 제가 앞으로 수업시간에 설명을

    하도록 하겠습니다 그럼 머신러닝이 왜 갑자기 현대 데이터 시대에 많이 쓰였을까요

    앞서 말했듯이 과거의 방법과는 다른 머신러닝이란 방법으로 다양한 분석법적인 접근이 이 시대에는 가능해졌는데

    예를 하나 들어 볼게요

    이게 사람의 행동을 모바일 액티비티 트래커라는 앱을 통해서 분석하는 건데

      의 추구에 따라 데이터가 다양하게 들어오는 건데

    조깅할 때 걸을 때 앉았을 때 일어섰을 때의 데이터가 이렇게 다양하게 들어옵니다 과거의 일반적인 방법은 이런 데이터를 보고

    워킹이라고 생각하시면 이런 맥스값이나 밍값 그리고 조깅도 맥스값이나 밍값 시팅도 맥스밍이 있을 수 있고

    그리고 에버리지나 그런 표준 편창 이런 걸 이용해서 분석을 하는 거였는데

    근데 이것에 대한 분석이 모든 사람 그리고 모든 장소에 대해 일반성을 갖는다는 것은 어렵습니다

    그리고 여러가지 제약사항이 또 있는데

    예를 들면 만약에 어떤 여자가 이 폰을 가방에 놔두고 혹은 앞주머니에 놔두고

    움직였을 때 이것에 대한 스탠다드 디비에이션이나 에버리지 값이나 맥스밍이 다르게 나올 수 있겠죠

    그래서 과거의 방식은 이러한 한계성이 있는데

    현재의 머신러닝 방법은 이 한계성을 어느 정도 보완을 한다고 생각하시면 됩니다

    그래도 이런 휴리스틱 경험적인 방법이 꼭 안좋은 건 아니고

    지금도 사실 머신러닝 딥러닝 쪽에서 휴리스틱한 방법을 베이스로 두고

    그 근간을 두고 머신러닝이랑 딥러닝을 이렇게 덧붙여서 결과를 내는 방식도 많거든요

    그래서 적절한 조화가 필요한데 아무튼 이런 제약사항을 극복하기 위해서

    머신러닝을 사용한다고 했을 때

    예를 들면 기시전 트리를 사용한다고 했을 때는 이런 밍값이나 스탠다드 디비에이션이나 맥스밍을 다양하게

    가지마다 이렇게 정도를 설정해 주어서 데이터를 분석하는 방법이 있을 수 있겠습니다

    혹은 또 다양한 방법이 많은데 기시전 트리 말고도 랜덤 포레스트나

    라이브 베이스 클래시파이어나 서버드 레코머징 미뉴 리그레이션 히든 마크로 모델 등등의 모델들이 많은데

    이런 모델들은 제가 수업하면서 직접 구현도 해보고 설명도 앞으로 더 하면서

    얘기를 나누도록 하겠습니다 그런데 이런 머신러닝 방법도 단점이 있는데 이런 머신러닝은

    사전 지식이 없으면 데이터를 프리 프로세싱 하거나 피처 익스트랙션 전처리 하거나 특히 추출을 하기에

    힘이 들 수 있습니다 예를 들면 리니어 리그레이션으로 머신러닝을 한다고 가정하면

    이 데이터가 리니어 한지 먼저 파악을 해야 되고 기시전 트리는 아까 보여드렸듯이 이런 노드의 갯수나 이런 가지의 갯수

    그리고 깊이 등을 설정을 해야 되고 혹은 

      알고리즘 같은 경우에는 어떤 특징으로 군집을 설정할지에 대한

    데이터의 특징 추출이 필수적입니다 특징 추출이라는게 피처 익스트랙션이라고 생각하시면 되고

    이 피처 익스트랙션이 기반이 돼야 머신러닝이 이루어지는 건데 이 단점을 또 해결하기 위해서 딥러닝이라는 방법을 씁니다

    딥러닝은 앞서 머신러닝에서 필수적이라고 말씀드렸던 피처 익스트랙션을 할 필요 없이

    딥러닝 내부에서는 학습을 하면서 그 노드마다 웨이츠랑 바이어스를 업데이트 하면서

    피처 익스트랙션이 자동으로 되고 데이터를 분석을 할 수 있습니다

    이 딥러닝도 제가 계속 수업시간에 좀 더 수학적인 이론이랑

    그리고 모델을 보여드리면서 좀 더 자세히 설명을 하도록 하겠습니다

    딥러닝이랑 머신러닝을 데이터에 적절하게 사용하는 것이 현재 주요한 테스트이고

    일반적으로 딥러닝은 데이터가 많을수록 그리고 모델 사이즈가 클수록 더 좋은 성능을 가진다고 합니다

    실제로도 이미지나 보이스나 이런 데이터가 많고 모델 사이즈가 큰 경우에

    정말 좋은 성능을 가집니다 하지만 적절한 데이터에 적절한 딥러닝 알고리즘을 활용해야 되는 것이 중요하며

    이를 위해서는 어떤 데이터 형태가 있고 어떤 머신러닝 딥러닝 방법론이 있는지 먼저 아는게 중요하겠죠

    그래서 딥러닝 머신러닝 가지 타입에 대해서 설명을 드리고 그리고 각각 타입에 대한

    프로젝트를 짧게 소개를 드리도록 하겠습니다 머신러닝 딥러닝은 슈퍼바이즈드 러닝 언슈퍼바이즈드 러닝 레인포스먼트 러닝 이렇게 세가지로 구분을 지을 수 있는데

    제가 각각의 타입에 대해서 설명도 드리고 그리고 수행했던 프로젝트도 얘기를 드리면서 좀 더 이해를 쉽게

    해드리도록 하겠습니다 슈퍼바이즈드 러닝은

    한국말로는 교사학습 의도학습 이라고 하는데 답이 주어져 있는 데이터와

    그리고 목적이 분명한

    테스크를 수행하는데 사용하는 러닝 방법인데 예를 들면 입력으로 탐이랑 그림

    강아지 그리고 고양이를 이렇게 넣었을 때 아웃풋은 아 이게 숫자고 그리고 개고 고양이 인지를 미리 아는 데이터를 넣어서

    이 나 에 를 구하는게 슈퍼바이즈드 러닝입니다 좀 더 슈퍼바이즈드 러닝을 쉽게 설명하면 슈퍼바이즈드 러닝은

    두가지 타입이 있는데 클래시피케이션이랑 리그레이션 두가지 타입이 있습니다 클래시피케이션은 이렇게 녹색이랑

    파란색을 이런식으로 구분을 하는 분류형의 문제와 그리고 이렇게 이미지로 데이터가 이런식으로 선별적으로 되어 있을 때

    이런 리니어한 식을 나타내거나 혹은 차식을 형성하는 그런 리그레이션 회기식 모델을 추출하는 두가지 경우가 있습니다

    오른쪽 예를 보면 이거는 클래시피케이션 문제겠죠 빨간색은 아이리스 이런 꽃이 있고 그리고 세토사라는 꽃이 있고 버지니아

    라는 꽃이 있는데 이런식으로 데이터가 왔을 때 이 세모는 여기군에 속하고 그 네모 빨간색은 여기에 속하고

    노란색 동그라미는 여기에 속하고 이런식으로 분류형의 문제에 속합니다 이런 클래시피케이션이랑 리그레이션 문제는

    슈퍼바이즐러닝을 많이 사용합니다 일반적으로 여러분들이 만약에 어떤 데이터를 가지고 예측을 하거나

    경향을 보고 싶을 때는 슈퍼바이즐러닝을 사용합니다

    예전에도 제가 짧게 설명 드렸는데 이런 문제가 슈퍼바이즐러닝의

    하나의 예제입니다 이 알고리즘의 개발 목적은 공조복합제어 기술을 통해서 건물에너지 절감 및

    최적환경 구현이었는데

    답이 나와있는 데이터라고 해야할까 그게 무슨 말이냐면

    지금 데이터는 각각 시간에 대해서 그러니까 만약에 시에는 도 새벽 시에는 도 새벽 시에는 도

    도 도 이런식으로 시간에 따르면 다 데이터가 있고 그리고

    이제 새벽 시 시에도 다 데이터가 있잖아요

    근데 이제 이거가 하고자 하는 목표는 다음날 새벽 시에 몇도 다음날 아침 시에 몇도 이런식으로 예측을 하면서

    그거에 알맞은 제어를 하는 건데 각각 시간에 대해서 데이터가 다 정답이 있는 레이블이 있는 데이터 세트였으니까

    이거는   예측을 회기 모델로 구현하는  이 될거고

    예전에도 설명을 드렸는데 기존의 알고리즘은 만약에 아침 시 출근이면

    이미대로 새벽 시에 난방을 켭니다 근데 지금 여기서 하고자 하는 것은 아침 시에 정확한 온도를 맞추기 위해서는 굳이 새벽 시에 미리 켜서

    이만큼의 낭비되는 에너지를 만들기 싫다는 거죠 그래서 이 최적 시작점을 인공지능을 통해서 학습을 하고

    학습 데이터가 실내온도 외기온도 그리고 출근시간 이런식으로 되고

    이런 제어 값은 시오톤 온도 외기온도 실내온도 이런 걸로 제어를 하는데

    사실 여기서 복합제어까지 가기 전에 그 최적점의 난방 시작 시간과 난방 종료 시간을

    산출하는 것이 이 프로젝트의 목표였습니다

    그래서 이 프로젝트는     이라고 하기도 하고

     멀티레이어 펄셉트론 이라고도 하는데 그냥 가장 기본적인 딥러닝

    유럴 네트워크의 모델을 사용해서 최적 시간을 설정한 프로젝트였습니다

    이 인공신경망이 어떻게 작동하고 동작하는지는 수업하면서 하나하나 알려드리도록 하고

    그리고 실제로도 파이썬으로도 구현하면서 각각 인풋 데이터가 뭐고

    데이터가 뭔지는 하나하나 해보면서 제가 설명을 드리도록 하겠습니다

    그래서 이렇게 최적 시간 설정과 그리고 최적 정지 시간 설정은 인공신경망으로 한 과업이 되고

    이게  의 첫번째 예제 프로젝트가 되겠습니다

    이런식으로 해서 실제 기술을 적용한 구간과 그리고 적용하지 않은 구간과 인공신경망의 기술을 적용한 구간의

    에너지 사용량에 대해서 실제로 조사를 했고 이 건물 같은 경우에는 층과 층이

    동일한 설비 모델로 구성이 되어 있었기 때문에

    각 기간별 어떤 기간은 실제 알고리즘을 적용한 구간에 대해서

    에너지를 뽑았고 다른 기간에 대해서는 기존의 알고리즘에 대한 제어 방법으로

    에너지를 산출한 결과를 뽑아서 비교를 했습니다 그랬더니 기술을 적용한 구간이 

    에너지 절감을 한 결과를 얻었으며

    지금도  모델에는 이 모델이 실려있는 걸로 알고 있습니다

    이렇게  은

    이런 예측이죠 근데 예측인데 클래시피케이션 그러니까  아니면  남 아니면 여 이런 클래시피케이션 문제가 아니고 이 문제는

    다음 날 혹은 시간 뒤 분 뒤에 어떤 온도를 맞출 것이냐 이 공조기를 켰을 때 그렇게 회귀 값에 대해서 회귀에 대한

    프로젝트를 진행했기 때문에 이거는 앞서 말한 리그레이션에 해당합니다

    그리고 제가 아까 말씀드렸던  이 아니고   문제인데

     은 지금 그림에 나와 있듯이 는 있는데 에 대한 값이 없어요 그러니까

    유지수는 개고 방정식은 하나 잖아요 그러면 이거는 일반적으로 수학을 했을 때

    할 수 없는 문제로 정의를 합니다  은 보통

    이런식으로 유사한 그룹끼리 클러스터링 군집하는 문제가 많은데

    지금 여기서 그림을 보시면 회색 사람들이 이렇게 있는데 이미대로 녹색 사람들 파란색 빨간색 보라색 이런식으로

    군집을 시켜놓은 이 녹색 파란색 빨간색 보라색은 어떤 정답 레이블이 있어서 이렇게 나눈게 아니고

    그냥 사용자 혹은 데이터에 의해서 이런식으로

    클러스터링을 한 문제거든요 클러스터링은 보통

    이런 쪽 생명 쪽에 막 이렇게 여러개만 지금 어떻게 클래시피케이션을 할 수 없는 레이블이 없는 이런

    를 분석할때 그냥 이미대로 이런 색깔의 변화나

    의 밀집도의 변화에 따라서 달라지는 데이터의 양상을 보고 이미대로 클러스터링을 하는 것이

    또 문제입니다

    네 그리고 이런 클러스터링 문제뿐만 아니라 사실 정의할 수 없는  값에 대해서 정의할 수 없는 문제에 대해서도

     이 들어가는데 제가 저번에 설명했던 프로젝트 중에서     라는

    프로젝트가 있는데 이거는 설비 쪽의 고장진단에 대한 프로젝트인데 사실 설비의 고장진단을 그냥 만약에 설비

    서플라이펜이나 급기펜 그러니까 급기펜이 고장났다고 했으면 급기펜 내부의 상태를 점검해주면 제일 빠른 방법이지만

    그러지 말고 서플라이펜과 연계된 이런 온도 센서나 압력 센서 등을 다 보면서

    온도 센서가 이상한데 이게 서플라이펜 문제가 아니고 만약에 힛 익스체인저 열교환기 문제 혹은

    댐포대 문제 이런 식으로 찾아주는게 이 과제였는데 사실 온도 하나 혹은 압력 하나 혹은 유량계나 풍량계의 값에 따라서

    그런 특정 성분에 대한 분석을 추출하는게 굉장히 힘듭니다 그리고 이 고장에 대한 정도를 정해준 것이 아니기 때문에

    이거는 정답이 없는 한 문제이기 때문에 이건  과  이라고 하는데

     이지만 어떤 문제를 정의할 수 없는 구간구간에 대해서  으로 프리트레이닝 그러니까

    미리 트레이닝을 한 모델을 들고 와서 수행을 합니다 이거는 제가 또 다음 시간에 좀 더 자세히

     스크립트나 한번 알고 있으면 제가 제대로 설명을 할 기회가 있으면 설명을 해드리도록 하는데

    아무튼 이 문제도  과 그러니까   과   플러스 그리고 이제  으로

    고장 진단을 한 프로젝트인데 임의대로 고장에 대한 데이터는 라는 시뮬레이션 툴을 사용해서 만들고

    정상은 그냥 일반적인 정상 데이터를 받아서 만들어서 이 두개를   에 학습을 시켜서

    임의의 데이터가 들어왔을 때 이것이 고장인지 혹은 고장이 아닌지 고장이면 어떤 고장인지를 판단하는 프로젝트가 되겠습니다

    이런 식으로 하나하나의 레이어별로

    이건 조금 어려운 내용인데 레이어별로 이런 레이블이 없기 때문에 레이어별로의 그 레이블을 임의대로 설정해주는  인데

    이거는 기회가 되면 제가 나중에 설명을 드리고 혹은 시간이 없으면 제가 이 관련된 논문을 올려드리도록 하겠습니다

    이게  이라는 레이어를 사용한 모델인데 이거는 캐나다의 정말 유명한 교수인 흰등 교수가

    그 당시에 이 논문을 발표함으로써 엄청난 주목도 받았고    모델을 사용해서

    이렇게 정의할 수 없는 레이블에 대한 레이어별로 이렇게  을 하면서 결국에는  을 위한 프레임워크를 짠 구조인데

    아무튼 이런 식으로 각각의 정의할 수 없는 데이터에 대해서

    수행한 프로젝트입니다 이거는 결과는 저번 에서 다 했으니까 보시면 될 것 같고

    이거는  의 프로젝트가 아니고   프로젝트인데

    이것도 좀 설명을 드리면 이게 왜  의 프로젝트냐면

    이거는 태양광 예측에 대한 모듈을 생성하는 건데 태양광 예측을   로 수행을 해서

    아침시간 혹은 저녁시간 혹은 내일 그리고 비올때 맑을때 예보 데이터를 통해서 태양광을 예측하는

    리그레이션에 해당하는 모델을 수행한 프로젝트입니다

    이거는 예전 현대건설연구소    를 대상으로 태양광 예측 모델을 만든거고

    데이터는 이런 식으로 추출을 해서 이런 식으로가 어떤 식이냐면

    우리나라 예보 데이터가 히스토릭 데이터를 따로 저장하지 않는데 그래서

    년 월부터 계속 데이터를 모아뒀었어요 그래서 년 월까지 계속 모아두고

    년 월까지 계속 모아두면서 예보 데이터에 대한 데이터를 개더링하고

    그리고 보시면 알겠지만 이게 시간 단위로밖에 데이터를 받을 수 없어서

    각각의 그러니까 시간에 따른 예측은 너무 타임 갭이 크기 때문에 시간 혹은 분으로

    인터폴레이션 보감법을 통해서 데이터를 생성해서 학습을 했습니다 예보 데이터 보감법이란게 뭐냐면 만약에 시에서 시까지

    데이터가 있으면 시 시에 대한 데이터는 없잖아요 그럼 시 시에 대한 데이터를 시 시 혹은 앞선 시 시 시 이런 식으로

    데이터의 경향을 보면서 가운데 시간에 대한 데이터를 추출하는게 보감법이라고 생각하시면 됩니다 보감법은 데이터 인터폴레이션이라고

    얘기를 하는데 그런식으로 해서 데이터를 만들고 이 데이터를 학습해서 각각 시간에 맞는 태양강 예측 값을 찾아내는 프로젝트였습니다

    예보 값은 풍향 풍속 외기 습도 하이코드라고

    맑을 때는 이고 흐릴 때는  이런식으로 숫자를 나타내면서

    맑음과 흐림 그리고 비올 때의 값을 뿌려주는 값이고 프리스펙테이션은 강수량 그리고 리프트는

    태양고도 값인데 이런식으로 값을 받아서 태양강 생산량을 예측하는 프로젝트를 수행했습니다

    물론 공조기의 온오프 시간은 당연히 데이터로 넣었구요

    그랬을 때 뉴럴넷 덕후가 소프트웨크 머신 그리고 리콘트 뉴럴넷 그리고 다른 머신러닝 방법을 썼을 때

    리콘트 뉴럴넷이 가장 좋은 결과를 냈고

    타임 시리즈한 데이터라는 시간에 따라 들어오는 데이터를 타임 시리즈한 데이터라고 하는데

    타임 시리즈한 데이터를 학습할 때는 리콘트 뉴럴넷 덕후의 개념 계열의 이나 그리고  이런 모델을 사용했고

    지금은 트랜스포머나 레즈넷 이런 모델을 많이 사용합니다

    그런식으로 해서 수행을 했던 프로젝트고

    그랬을 때 태양강 생산량 뿐만 아니라 에너지 소비량도 예측을 했는데

    에너지 소비량은 오피스 특징을 잘 생각하시면 이거는 예측을 하기가 쉽거든요

    이렇게 꺾인 점은 당연히 점유시간에 에너지를 잘 안쓰기 때문에 이런식으로 나오는 그래프가 많았고

    그래서 에너지 소비량 같은 경우에는 굉장히 예측하기 쉬웠는데

    태양강 생산량은 정말 예측이 좀 힘든 부분이 많았습니다

    워낙 예보 데이터가 그렇게 좋지 않아서 비오는 날과 흐린 날의 경우에는 잘 예측을 못하는 경우가 많았는데

    이거는 제가 나중에 어떤 방법론을 썼는지는 자세히 말할 수 있는 시간이 있으면 말해드리도록 하겠습니다

    이게 드랍아웃 제가 설명을 드릴 때 한번 설명을 드리도록 하겠습니다

    드랍아웃은 뉴럴레터워크를 설명할 때 자세히 설명을 드리도록 하겠습니다

    그리고 이제 하나 남았는데 강학습에 대해서 설명을 하려고 하는데

    년 네이처지에 이례적으로 비생명 분야에서 처음으로 네이처 표지를 장식한 논문이 있었는데

    이게 알파구 논문인데 이게 네이처지에 표지를 장식하면서  시대가 열렸다고 보면 될 것 같아요

    이 알파구에 들어간 알고리즘이 강학습이고 현재도 정말 강학습에 대한 논문들이 많이 나오고 있고

    어떻게 보면 현재 트렌디한 리서치 토픽이라고 생각하시면 됩니다

    강학습은 일반적인 슈퍼바이즈드 러닝과 언슈퍼바이즈드 러닝과는 좀 다른 개념인데

    왜냐하면 슈퍼바이즈드 러닝과 언슈퍼바이즈드 러닝은 어쨌든 어떤 특정한 에 대해서

    와인 를 계속 만들어줬을 때 와 실제 와 계속 만들어주는  간의 로스트험을 계속 미니마이즈 해야 되는데

    강학습은 이 리워드 값을 그러니까 어떤 액션을 취해줬을 때의 보상을 맥시마이즈 하는 쪽으로 학습을 하는 것이 기존과는 조금 달라요

    예를들면

    에이전트라고 불리는 바둑이라고 생각하면 알파고라는 에이전트가 어떠한 바둑 액션을 줬을 때

    그 환경에 대한 변화가 나중에 몇 집 차이로 이길지에 대한 리워드 이런 보상이 계속 커지게 그러니까 꼭 이길 수 있도록

    리워드가

    맥시마이즈 되도록 학습을 하는게 강학습입니다

    알파고 예를 들어보면 보통 알파고는 만약에 논문을 조금 읽어보시면

    레인포스모드 러닝을 썼다고 하는데 거기에 또 컨볼루션 뉴럴레터 어플을 썼다고 나오거든요

    그러면 조금 헷갈려요 처음에 논문을 읽을 때 분명히 그 알파고는 레인포스모드 러닝을 썼다고 하는데 컨볼루션 뉴럴레터 어플이 나오니까

    조금 헷갈릴 수도 있는데 컨볼루션 뉴럴레터 어플은 이 를 구성할 때 사용을 합니다

    보통 학습을 구성할 때 이런 리워드 설계도 중요하지만  현실을 대변하는 환경 구성이 정말 중요한데

    그 환경 구성을 하는게 시뮬레이터라고 하고 그 시뮬레이터로 컨볼루션 뉴럴레터 어플을 쓴게 알파고의 모델이라고 생각하시면 됩니다

    게임으로 예를 들면 그래서 이게 보통 강학습하면 게임을 예로 많이 들거든요

    어떤 게임을 했을 때 왜냐하면 아까 말씀드렸듯이 이런  구성이 게임이 조금 구성하기가 편해서

    보통 모든 강학습의 프레임워크나 아니면은 이 기생플로 나온 것은 다 게임이라고 생각하시면 되요

    그래서 이런  구성이 게임이 좀 편하기 때문에 이런식으로 게임일제가 많은데

    그래서 어떤 액션 그러니까 위아래 혹은 앞뒤 이런식으로 조이스틱으로 움직일 때가 액션이라고 하면은

    액션에 따른 화면에 이런 공룡인가 비행기가 왔다갔다 할 때의 점수를 리워드라고 생각하시면

    비행기가 왔다갔다 하는게 이런 액션을 주었을 때의 에 변하고 가 변했을 때의 점수가 리워드라고 생각하시면 됩니다

    그래서 이런 리워드를 계속 맥시마이저 하는 방향으로 이런 프레임워크가 계속 학습을 하는거고 이거를 강학습이라고 생각하시면 됩니다

    그 알고리즘이 인데 이거는 제가 강학습 수업을 할 때 자세히 설명드리도록 하겠습니다

    보통 강학습에서 정말 대표되는 알고리즘이   이런식으로 있는데 이게 이

    그냥 정말 베이직한 개념은 그거에요 그 리워드를 계속 맥시마이저하게 하는 학습법이라고 생각하시면 됩니다

    이거는 강학습에 대한 프로젝트였는데

    이게 제가 설비쪽 제어 쪽에 지금 많이 포커스해서 과제를 수행했었기 때문에 설비쪽 제어 쪽을 자세히 모르시면

    제가 한번 보충설명을 할 자료나 강의를 하나 더 진행을 하도록 하겠습니다

    아무튼 이 설비쪽에서 보통  제어를 하는데 이  제어가 뭐냐면    제어라고 하는데

    이게 뭐 한국말로 하면 비례적품미분제어 이런식으로 생각하시면 되는데

    보통 벨브나 펌프나 팬이나 전부  제어가 기본 제어로 깔려 있습니다

    근데 이  제어는

    이런식으로   라는 상수텀을 가지고 있는 식입니다

    근데 이 상수텀은 건물 초기에 임해 관리자가   값을 정해놓고 가거든요

    근데 이   값은 정말 에서 가지 숫자가 다양해요 근데 이 다양한 값들을 관리자는 당연히 다 찾을 수 없고

    그리고 변화하는 환경과 변화하는 부하에 대해서 이 식은 잘 제어를 할 수가 없는 구조에요

    그래서 이   를 인공지능으로 찾아보자는게 이 프로젝트의 목표였고

      만 찾으면 되는게 아니고 이 플랜트 프로세스 그러니까 건물은 건물의 제어 방법이죠

    이 건물을 제어했을 때 환경에 따른   가 정말 중요하기 때문에   를 맞춘다고 해서

    건물을 제대로 제어하는 것도 아니고 변화하는 플랜트 프로세스를 또 반영해서   를 찾아야 되기 때문에

    이   값은 정말 어마어마하죠 그래서 이걸 관리자들이 잘 못찾고 당연히 그냥 한 값을 넣는 경우가 정말 많은데

    음 그래서 이거를 방학습으로

    프로젝트를 수행한 경우고 이 아까 말씀드렸던 리워드에 해당하는 것은 만약에 온도라고 생각하시면 이 온도편차를 최소화하는

    그러니까 온도편차를 최소화하는게 어떻게 보면은 리워드를 맥시마이징 하는거죠 저희는 온도를 잘 맞추기 위해서 를 쓰는거고

    에   를 찾는건데 이 온도를 잘 맞추는거니까 리워드를 맥시마이징 하는 방향으로 계속 학습을 하면서

      를 찾는 프로젝트가 이번 프로젝트였습니다

    그래서 결과로 실제 결과는 이제 예를 들면 이런식으로 실제로는 값을 넣었을때 실제 기존에   를 넣었을때는 이런 값인데

    이제 이런 방학습으로 찾은   를 넣었을때는 이런식으로 엄청 잘 맞는 경우가 나옵니다

    이게 온도만 잘 맞추면 되는게 아니고 벨브값도 처음에는 막 이런식으로 그냥 엄청 많은 양의 가스가 이렇게 분출되게

    벨브가 크게 이렇게 움직이는데 저희같은 경우에는 이런식으로

    궤도율도 작고 이제 가스 배출량도 작게 하면서 에너지를 세이빙하는 그런 과제입니다

    이제 프로젝트랑 슈퍼바이즈 러닝  슈퍼바이즈 러닝 레인포스먼트 러닝에 대한 설명을 간단하게 마쳤고

    팔선 넌파이랑 판다스 그리고 사이클런을 진행하면서 좀 더 자세한 설명을 드리도록 하고

    그 모듈을 들어가기 앞서 제가 혹시나 넌파이랑 판다스를 설명할 때 리그레이션이나 클래시피케이션이나

    그리고 슈퍼바이즈 러닝이나 듀얼 레이터 이런식으로 제가

    사전 학습이 없는 상태에서 말을 할 수도 있기 때문에 이렇게 강의를 좀 조정을 했구요

    그리고 모델이나 알고리즘을 선택할 때

    여기도 나오죠 만약에 클래시피케이션이면 범주를 예측하거나 리그레이션이면 숫자 예측 숫자 예측이라는게

    그 아까도 말씀드렸듯이 어떤 경향성을 보이거나 프레딕션을 할 때 보통은 다 리그레이션이라고 생각하시면 됩니다

    클래시피케이션은 범주라고 하는게 남녀 혹은

    오엑스 이런식으로 아니면 집단 집단 집단 이런식으로 범주를 예측할 때 클래시피케이션이라고 생각하시면 되고

    클래시피케이션이랑 리그레이션은 정말 비슷한데 로스펑션 그러니까

    학습을 할 때 로스펑션을 정의해주는 경우가 있는데 이 로스펑션만 조금 바꿔주면 이 두가지의 모델은

    그리고 클러스터링은 아까도 말씀드렸듯이 군집에 대한 결과를 나타내거나 혹은

    레이블이 없는 데이터를 수행할 때 클러스터링을 많이 씁니다 아  을 많이 씁니다

    모델평가는 보통 이런식으로 쓰는데 정말 이거는

    타임 시리즈 데이터는 라고 이런식의 결과를 나타내는 펑션을 쓰는데 그냥 이런거 다 무시하시고 예를 들면

    실제 데이터가 이건데 만약에 저희가 리그레이션으로 찾은 함수값이 이거에요 그러면 이 오차는

    이 점과 이 펑션의 거리에 제곱에 루트를 씌우거나 제곱에 합을 하거나

    이런식으로 해서 하는게 지금 이 얘기입니다 그래서 민스쿄어 데이터나 루트 민스쿄어 데이터는 한번 구글링을 해보셔서 어떤 의미인지

    찾으면 됩니다 그냥 간단하게 진짜 실제 데이터와 저희가 예측한 데이터의 차이를 이런식으로 나타내니깐

    어떤걸 쓰셔도 사실은 상관은 없어요 근데

    이런 타임 시리즈라는 데이터는 사실 저는 를 많이 쓰긴 하지만

    보통 나 를 써도 상관없습니다 그러니까 이런 모델 평가에 대한 펑션은 사실

    용어가 다르고 또 수식도 다르지만 어떻게 보면 하나의 텀으로 수렴이 되거든요 그냥 실제 데이터와 예측한 데이터의 차이

    이런식으로 생각을 하시면 됩니다

    오늘 수업은 여기서 마치는데 질문이 있거나 그리고 또 제가 좀 더 추가적으로 설명해야 될 것은

    논문이나

    아니면 짤막한 강의 자료로 올리면서 보충을 해드리도록 하겠습니다

    오늘 수업은 여기서 마치겠습니다 감사합니다
